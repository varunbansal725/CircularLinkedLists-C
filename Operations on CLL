#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
}*head=NULL, *first=NULL, *second=NULL, *third=NULL, *fourth=NULL, *fifth=NULL;

void create(int arr[], int size) {
    struct Node *t, *tail;
    head=(struct Node *)malloc(sizeof(struct Node));
    head->data=arr[0];
    head->next=NULL;
    tail=head;
    for(int i=1; i < size; i++) {
        t=(struct Node *)malloc(sizeof(struct Node));
        t->data=arr[i];
        t->next=NULL;
        tail->next=t;
        tail=t;
    }
    tail->next=head;
}

void create1(int arr[], int size) {
    struct Node *t, *tail;
    second=(struct Node *)malloc(sizeof(struct Node));
    second->data=arr[0];
    second->next=NULL;
    tail=second;
    for(int i=1; i < size; i++) {
        t=(struct Node *)malloc(sizeof(struct Node));
        t->data=arr[i];
        t->next=NULL;
        tail->next=t;
        tail=t;
    }
    tail->next=second;
}

void create2(int arr[], int size) {
    struct Node *t, *tail;
    fifth=(struct Node *)malloc(sizeof(struct Node));
    fifth->data=arr[0];
    fifth->next=NULL;
    tail=fifth;
    for(int i=1; i < size; i++) {
        t=(struct Node *)malloc(sizeof(struct Node));
        t->data=arr[i];
        t->next=NULL;
        tail->next=t;
        tail=t;
    }
    tail->next=fifth;
}


void display(struct Node *p) {
    while(p->next!=head) {
        printf("%d ", p->data);
        p=p->next;
    }
    printf("%d\n", p->data);
}


void display1(struct Node *p) {
    while(p->next!=first) {
        printf("%d ", p->data);
        p=p->next;
    }
    printf("%d\n", p->data);
}

void display2(struct Node *p) {
    while(p->next!=third) {
        printf("%d ", p->data);
        p=p->next;
    }
    printf("%d\n", p->data);
}


void display3(struct Node *p) {
    while(p->next!=second) {
        printf("%d ", p->data);
        p=p->next;
    }
    printf("%d\n", p->data);
}


void display4(struct Node *p) {
    while(p->next!=fourth) {
        printf("%d ", p->data);
        p=p->next;
    }
    printf("%d\n", p->data);
}


void display5(struct Node *p) {
    while(p->next!=fifth) {
        printf("%d ", p->data);
        p=p->next;
    }
    printf("%d\n", p->data);
}




int count(struct Node *p) {
    int k;
    while(p->next!=head) {
        k++;
        p=p->next;
    }
    k++;
        return k;
    }

void verify_circular_list(struct Node *p) {
    struct Node *tail=head;
    while(tail->next!=head)
        tail=tail->next;

    if(tail->next==head)
        printf("The list is a circular linked list\n");
    else
        printf("The list is not a circular linked list\n");
}

void insert(struct Node *p, int position, int element) {
    struct Node *t, *tail=head;
    if(position > 0 && position <= 10) {
    t=(struct Node *)malloc(sizeof(struct Node));
    t->data=element;
    t->next=NULL;
    while(tail->next!=head)
        tail=tail->next;
    if(position==0) {
        t->next=head;
        head=t;
        tail->next=head;
    }
    else {
        for(int i=0; i < position-1; i++)
            p=p->next;
            t->next=p->next;
            p->next=t;
    }
    }
    else
        printf("Position not defined\n");
}

void delete(struct Node *p, int position) {
    struct Node *temp, *tail=head;
    int k=0;
    while(tail->next!=head)
        tail=tail->next;

    if(position==0) {
        temp=head;
        head=head->next;
        tail->next=head;
        free(temp);
    }
    else {

    while(p->next!=head && k < position-1) {
        k++;
        temp=p;
        p=p->next;
    }
    temp->next=p->next;
    free(p);
    p=temp->next;
}
}

int search(struct Node *p, int element) {
    int i=0;
    while(p->next!=head) {
    if(p->data==element)
        return i;
    else
        i++;
        p=p->next;
    }
}

void reverse() {
    struct Node *p, *q, *tail;
    q=head;
    p=head->next;
    head=head->next;
    q->next=NULL;
    tail=q;
    while(p->next!=tail) {
        head=head->next;
        p->next=q;
        q=p;
        p=head;
        }
        p->next=q;
        tail->next=head;
}

void copy() {
    struct Node *t, *last, *temp, *tail;
    temp=head;
    tail=head;
    while(tail->next!=head)
        tail=tail->next;
    first=(struct Node *)malloc(sizeof(struct Node));
    first->data=head->data;
    first->next=NULL;
    last=first;
    temp=temp->next;
    while(temp!=head) {
        t=(struct Node *)malloc(sizeof(struct Node));
        t->data=temp->data;
        t->next=NULL;
        last->next=t;
        last=t;
        temp=temp->next;
    }
     last->next=first;
}

void delete_list(struct Node *p) {
    struct Node *temp, *tail=head;
    while(tail->next!=head)
        tail=tail->next;

    while(p!=tail) {
        temp=p;
        p=p->next;
        free(temp);
        head=p;
    tail->next=head;
    }
    free(p);
}


void concatenate(struct Node *p, struct Node *q) {
    third=p;
    if(p==first && q==head) {
    while(p->next!=first)
        p=p->next;
    p->next=q;
    while(q->next!=head)
        q=q->next;
    q->next=third;
}
    else if(q==first && p==head) {
    while(p->next!=head)
        p=p->next;
    p->next=q;
    while(q->next!=first)
        q=q->next;
    q->next=third;
    }
}

void merge(struct Node *p, struct Node *q) {
    struct Node *last=fifth, *last1=second, *tail;
    while(last->next!=fifth)
        last=last->next;
    while(last1->next!=second)
        last1=last1->next;
    last->next=NULL;
    last1->next=NULL;
    if(p->data < q->data) {
        fourth=p;
        tail=p;
        p=p->next;
        fourth->next=NULL;
    }
    else {
        fourth=q;
        tail=q;
        q=q->next;
        fourth->next=NULL;
    }
    while(p && q) {
        if(p->data < q->data) {
            tail->next=p;
            tail=p;
            p=p->next;
            tail->next=NULL;
        }
        else {
            tail->next=q;
            tail=q;
            q=q->next;
            tail->next=NULL;
        }
    }
    if(p) {
        tail->next=p;
        tail=p;
    }
    if(q) {
        tail->next=q;
        tail=q;
    }
    tail->next=fourth;
}

void main() {
    int size;
    int A[10]={1,3,5,7,9,11,13,15,17,19};
    int B[10]={0,2,4,6,8,10,12,14,16,18};
    int C[10]={1,3,5,7,9,11,13,15,17,19};
    size = sizeof(A) / sizeof(A[0]);
    create(A, size);
    display(head);
    create1(B, size);
    display3(second);
    create2(C, size);
    display5(fifth);
    printf("List is of length: %d\n", count(head));
    verify_circular_list(head);
    printf("After element insertion: ");
    insert(head, 10, 5);
    display(head);
    printf("List is of length: %d \n", count(head));
    delete(head, 11);
    printf("After deletion of element: ");
    display(head);
    printf("Element found at: %d\n", search(head, 8));
    printf("List after reversing: ");
    reverse();
    display(head);
    copy();
    display1(first);
    /* delete_list(head);
    display(head); */
    printf("After concatenation: ");
    concatenate(head, first);
    display2(third);
    merge(fifth, second);
    display4(fourth);


}
